{"name":"Sorting","tagline":"Comparison of various sorting algorithms","body":"Sorting\r\n=======\r\n\r\nComparison of various sorting algorithms.\r\n\r\nWhat is it?\r\n-----------\r\n\r\n`sorting` is a simple modular program that debugs various sorting algorithms in order to spot advantages and drawbacks of each one. It consists of a main program, `sorting.c`, which executes the various algorithms while keeping track of many operations and resource usage.\r\n\r\nIt currently displays:\r\n\r\n* time,\r\n* comparisons,\r\n* swappings,\r\n* writes,\r\n* recursion depth,\r\n* space,\r\n* memory allocations.\r\n\r\nThe algorithms implemented are divided in two groups depending on their performances:\r\n\r\n* fast:\r\n  * comb\\_sort,\r\n  * heap\\_sort,\r\n  * merge\\_sort,\r\n  * quick\\_sort,\r\n  * quick\\_fast\\_sort,\r\n  * shell\\_sort,\r\n  * ciura\\_shell\\_sort;\r\n* slow:\r\n  * bubble\\_sort,\r\n  * cocktail\\_sort,\r\n  * gnome\\_sort,\r\n  * insertion\\_sort,\r\n  * selection\\_sort.\r\n\r\n`sorting` performs sorting on different types of arrays in order to emphasize different characteristics of the algorithms (such as adaptiveness).\r\n\r\nIt currently sorts arrays of *length - type*:\r\n\r\n* 5000 - decreasing,\r\n* 15000 - decreasing,\r\n* 25000 - decreasing,\r\n* 5000 - almost sorted,\r\n* 15000 - almost sorted,\r\n* 25000 - almost sorted,\r\n* 5000 - random,\r\n* 25000 - random,\r\n* 50000 - random,\r\n* 100000 - random,\r\n* 300000 - random,\r\n* 500000 - random.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}